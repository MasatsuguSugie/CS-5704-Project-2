package boundedqueue;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * <p>
 * This class is the ListQueue class, it extends the AbstractQueue class. This is tested with the
 * ListQueueTest class.
 * </p>
 * <p>
 * Implementations of this class should have a one-argument constructor that takes the desired
 * capacity and creates an empty queue. The capacity must be strictly greater than zero.
 * </p>
 * 
 * @author sugie
 * @version Feb 25, 2019
 * @param <E>
 */
public class ListQueue<E>
    extends AbstractQueue<E>
{
    private List<E> contents;


    /**
     * <p>
     * Create a new ListQueue object.
     * </p>
     * 
     * @param max
     *            capacity of the bounded queue
     * @throws IllegalArgumentException
     *             if capacity is less than one
     */
    public ListQueue(int max)
    {
        super(max);
        if (max < 1)
        {
            throw new IllegalArgumentException();
        }
        contents = new LinkedList<E>();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public void enqueue(E element)
        throws IllegalStateException,
        IllegalArgumentException
    {
        if (element == null)
        {
            throw new IllegalArgumentException();
        }
        if (isFull())
        {
            throw new IllegalStateException();
        }
        contents.add(element);

    }


    /**
     * {@inheritDoc}
     */
    @Override
    public E dequeue()
    {
        if (isEmpty())
        {
            throw new IllegalStateException();
        }
        return contents.remove(0);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public int length()
    {
        return contents.size();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Queue<E> newInstance()
    {
        return new ListQueue<E>(capacity);

    }


    /**
     * {@inheritDoc}
     */
    @Override
    public void clear()
    {
        contents.clear();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Iterator<E> iterator()
    {
        return contents.iterator();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public String toString()
    {
        return contents + ":" + capacity;
    }

}

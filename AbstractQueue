package boundedqueue;

import java.util.Iterator;

/**
 * <p>
 * An abstract class that implements the Queue interface. The methods in this class are inherited in
 * both the ListQueue and CIrcArrayQueue classes.
 * </p>
 * *
 * <p>
 * Implementations of this class should have a one-argument constructor that takes the desired
 * capacity and creates an empty queue. The capacity must be strictly greater than zero.
 * </p>
 * 
 * @author sugie
 * @version Feb 25, 2019
 * @param <E>
 */
public abstract class AbstractQueue<E>
    implements Queue<E>
{
    /**
     * 
     */
    protected final int capacity;


    /**
     * <p>
     * Create a new AbstractQueue object.
     * </p>
     * 
     * @param max
     *            capacity of the bounded queue
     */
    public AbstractQueue(int max)
    {
        capacity = max;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public int capacity()
    {
        return capacity;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public boolean isEmpty()
    {
        return length() == 0;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public boolean isFull()
    {
        return capacity == length();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public void append(Queue<E> that)
        throws IllegalArgumentException,
        IllegalStateException
    {
        if (that == null)
        {
            throw new IllegalArgumentException();
        }
        // if (that.length() == 0)
// {
// throw new IllegalArgumentException();
// }
// if (capacity - length() < that.length())
// {
// throw new IllegalStateException();
// }
        if (that.length() != 0)
        {
            E elements = that.dequeue();
            this.enqueue(elements);
            this.append(that);
        }
// while (!isFull())
// {
// E element = that.dequeue();
// this.enqueue(element);
// }

    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Queue<E> copy()
    {
        Queue<E> result = this.newInstance();
        for (E element : this)
        {
            result.enqueue(element);
        }
        return result;

    }


    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object o)
    {
        if (o == null)
        {
            return false;
        }
        if (o == this)
        {
            return true;
        }
        if (!(o instanceof Queue))
        {
            return false;
        }
        Queue<?> that = (Queue<?>)o;
        if (this.capacity() != that.capacity())
        {
            return false;
        }
        if (this.length() != that.length())
        {
            return false;
        }
        Iterator<E> thisIter = this.iterator();
        Iterator<?> thatIter = that.iterator();
        while (thisIter.hasNext())
        {
            E elem = thisIter.next();
            Object o1 = thatIter.next();
            if (!elem.equals(o1))
            {
                return false;
            }
        }

        return true;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode()
    {
        int result = 17;
        for (E element : this)
        {
            result = 31 * result + element.hashCode();
        }
        result = 31 * result + capacity();
        return result;

    }


    /**
     * {@inheritDoc}
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        Iterator<E> iterator = this.iterator();
        while (iterator.hasNext())
        {
            sb.append(iterator.next());
            if (iterator.hasNext())
            {
                sb.append(", ");
            }
        }
        sb.append("]:");
        sb.append(capacity);
        return sb.toString();
    }


    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public void enqueueMultiple(E... elements)
        throws IllegalStateException,
        IllegalArgumentException
    {
        if (elements == null)
        {
            throw new IllegalArgumentException();
        }
        if (elements.length == 0)
        {
            throw new IllegalArgumentException();
        }
        if (isFull())
        {
            throw new IllegalStateException();
        }
        for (E elem : elements)
        {
            enqueue(elem);
        }

    }

}
